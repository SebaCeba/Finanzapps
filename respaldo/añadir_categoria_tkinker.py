import sqlite3
import os
import tkinter as tk
from tkinter import ttk, messagebox

# üîπ Ruta de la base de datos
DB_PATH = os.path.join(os.getcwd(), "instance", "finanzas.db")

# üîπ Funci√≥n para obtener los tipos √∫nicos de la base de datos
def obtener_tipos_desde_bd():
    try:
        conexion = sqlite3.connect(DB_PATH)
        cursor = conexion.cursor()
        cursor.execute("SELECT DISTINCT tipo FROM categoria")
        tipos = [fila[0] for fila in cursor.fetchall()]
        conexion.close()
        return tipos
    except Exception as e:
        print(f"‚ùå Error al obtener tipos de la base de datos: {e}")
        return ["ingreso", "gasto_fijo", "gasto_variable", "otro"]  # Valores predeterminados en caso de error

# üîπ Funci√≥n para insertar la categor√≠a en la base de datos
def insertar_categoria():
    nombre = entry_nombre.get().strip()
    tipo = combo_tipo.get().strip().lower()  # Ahora puede aceptar valores personalizados
    parent_id = entry_parent_id.get().strip()

    # Validaciones b√°sicas
    if not nombre:
        messagebox.showerror("Error", "El nombre de la categor√≠a no puede estar vac√≠o.")
        return
    
    if not tipo:
        messagebox.showerror("Error", "El tipo de categor√≠a no puede estar vac√≠o.")
        return

    parent_id = int(parent_id) if parent_id.isdigit() else None  # Convertir a int si es un n√∫mero

    try:
        # Conectar a la base de datos
        conexion = sqlite3.connect(DB_PATH)
        cursor = conexion.cursor()

        # Insertar en la base de datos
        cursor.execute(
            "INSERT INTO categoria (nombre, tipo, parent_id) VALUES (?, ?, ?)",
            (nombre, tipo, parent_id),
        )
        conexion.commit()
        conexion.close()

        # Mostrar mensaje de √©xito y limpiar los campos
        messagebox.showinfo("√âxito", f"Categor√≠a '{nombre}' a√±adida correctamente con tipo '{tipo}'.")
        entry_nombre.delete(0, tk.END)
        combo_tipo.set("")
        entry_parent_id.delete(0, tk.END)

        # üîπ Actualizar los valores del ComboBox despu√©s de agregar un nuevo tipo
        actualizar_combobox()

    except Exception as e:
        messagebox.showerror("Error", f"No se pudo insertar la categor√≠a: {e}")

# üîπ Funci√≥n para actualizar el ComboBox con los nuevos tipos de la base de datos
def actualizar_combobox():
    tipos_actualizados = obtener_tipos_desde_bd()
    combo_tipo["values"] = tipos_actualizados  # üî• Actualiza la lista del ComboBox

# üîπ Crear la ventana principal
root = tk.Tk()
root.title("A√±adir Categor√≠a")
root.geometry("350x250")
root.resizable(False, False)

# üîπ Crear los campos de entrada
tk.Label(root, text="Nombre de la Categor√≠a:").pack(pady=5)
entry_nombre = tk.Entry(root, width=30)
entry_nombre.pack(pady=5)

tk.Label(root, text="Tipo de Categor√≠a:").pack(pady=5)

# üîπ Inicializar ComboBox con los tipos desde la base de datos
tipos_iniciales = obtener_tipos_desde_bd()
combo_tipo = ttk.Combobox(root, values=tipos_iniciales, width=27)
combo_tipo.pack(pady=5)
combo_tipo.set("")

tk.Label(root, text="ID de la Categor√≠a Padre (Opcional):").pack(pady=5)
entry_parent_id = tk.Entry(root, width=30)
entry_parent_id.pack(pady=5)

# üîπ Bot√≥n para a√±adir la categor√≠a
btn_a√±adir = tk.Button(root, text="A√±adir Categor√≠a", command=insertar_categoria)
btn_a√±adir.pack(pady=20)

# üîπ Ejecutar la ventana
root.mainloop()
